// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace InterViewProject.Models;

public partial class CoffeeContext : DbContext
{
    public CoffeeContext(DbContextOptions<CoffeeContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Admin> Admins { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Coffee> Coffees { get; set; }

    public virtual DbSet<Continent> Continents { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Package> Packages { get; set; }

    public virtual DbSet<Photo> Photos { get; set; }

    public virtual DbSet<Process> Processes { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Admin>(entity =>
        {
            entity.ToTable("Admin");

            entity.Property(e => e.AdminId).HasColumnName("AdminID");
            entity.Property(e => e.AdminOk).HasColumnName("AdminOK");
            entity.Property(e => e.ArticleOk).HasColumnName("ArticleOK");
            entity.Property(e => e.Email).IsRequired();
            entity.Property(e => e.MemberOk).HasColumnName("MemberOK");
            entity.Property(e => e.OrderOk).HasColumnName("OrderOK");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ProductOk).HasColumnName("ProductOK");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoriesName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Coffee>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK_Coffee_1");

            entity.ToTable("Coffee");

            entity.Property(e => e.ProductId)
                .ValueGeneratedNever()
                .HasColumnName("ProductID");
            entity.Property(e => e.CoffeeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CoffeeID");
            entity.Property(e => e.CoffeeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.PackageId).HasColumnName("PackageID");
            entity.Property(e => e.ProcessId).HasColumnName("ProcessID");
            entity.Property(e => e.RoastingId).HasColumnName("RoastingID");

            entity.HasOne(d => d.Country).WithMany(p => p.Coffees)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Coffee_Country");

            entity.HasOne(d => d.Package).WithMany(p => p.Coffees)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Coffee_Package");

            entity.HasOne(d => d.Process).WithMany(p => p.Coffees)
                .HasForeignKey(d => d.ProcessId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Coffee_Process");

            entity.HasOne(d => d.Product).WithOne(p => p.Coffee)
                .HasForeignKey<Coffee>(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Coffee_Products1");
        });

        modelBuilder.Entity<Continent>(entity =>
        {
            entity.ToTable("Continent");

            entity.Property(e => e.ContinentId).HasColumnName("ContinentID");
            entity.Property(e => e.ContinentName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.ToTable("Country");

            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.ContinentId).HasColumnName("ContinentID");
            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Continent).WithMany(p => p.Countries)
                .HasForeignKey(d => d.ContinentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Country_Continent1");
        });

        modelBuilder.Entity<Package>(entity =>
        {
            entity.ToTable("Package");

            entity.Property(e => e.PackageId).HasColumnName("PackageID");
            entity.Property(e => e.PackageName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Photo>(entity =>
        {
            entity.Property(e => e.PhotoId).HasColumnName("PhotoID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");

            entity.HasOne(d => d.Product).WithMany(p => p.Photos)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Photos_Products");
        });

        modelBuilder.Entity<Process>(entity =>
        {
            entity.ToTable("Process");

            entity.Property(e => e.ProcessId).HasColumnName("ProcessID");
            entity.Property(e => e.ProcessName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.Price).HasColumnType("money");
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_Categories");

            entity.HasOne(d => d.Country).WithMany(p => p.Products)
                .HasForeignKey(d => d.CountryId)
                .HasConstraintName("FK_Products_Country");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}